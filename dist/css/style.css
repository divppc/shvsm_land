@import url('https://fonts.googleapis.com/css?family=Open+Sans:400,700,700italic,300,600italic,600&subset=latin,cyrillic');
*
{
    box-sizing: border-box;
}
.clearfix
{
    zoom: 1;
}
.clearfix:before,
.clearfix:after
{
    display: table;

    content: '';
}
.clearfix:after
{
    clear: both;
}
html
{
    position: relative;
}
body
{
    font-family: 'Open Sans', sans-serif;

    position: relative;

    zoom: 1;

    width: 100%;
    min-width: 320px;
    margin: 0 auto;
    padding: 0;

    color: #fff;
}
body:before,
body:after
{
    display: table;

    content: '';
}
body:after
{
    clear: both;
}
*
{
    box-sizing: border-box;
}
a
{
    text-decoration: none;

    color: #fff;
}
img
{
    max-width: 100%;
}
.wrap
{
    zoom: 1;

    width: 60%;
    margin: 0 auto;
}
.wrap:before,
.wrap:after
{
    display: table;

    content: '';
}
.wrap:after
{
    clear: both;
}
header
{
    position: fixed;
    top: 0;
    left: 0;

    width: 100%;

    background: rgba(0,0,0,.15);
}
header .wrap
{
    position: relative;

    padding: 15px 0;
}
header .wrap .logo
{
    position: absolute;
    top: 15px;
    left: 50%;

    -webkit-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
            transform: translateX(-50%);
}
header .wrap .main-title
{
    float: left;
}
header .wrap .main-title p
{
    font-size: 30px;
    font-weight: bold;

    margin: 0;
}
header .wrap .main-title span
{
    font-size: 24px;
}
header .wrap .callback
{
    float: right;
}
header .wrap .callback p
{
    font-size: 36px;

    margin: 0;
}
header .wrap .callback a
{
    display: block;

    padding: 10px 0;

    transition: .2s;
    text-align: center;
    letter-spacing: 1px;
    text-transform: uppercase;

    border-radius: 2px;
    background: #3e87d1;
}
header .wrap .callback a:hover
{
    background: #1b6abb;
}
section.main
{
    background: url('../images/main-bg.png') no-repeat center/cover;
}
section.main .wrap
{
    padding: 15vw 0 12vw 0;
}
section.main .wrap .main-form
{
    float: right;

    background: #f6f6f6;
}
section.main .wrap .main-form .form-title
{
    font-size: 20px;

    padding: 1vw 2.3vw;

    text-align: center;

    border-bottom: 5px solid #ff4a4a;
    background: #282828;
}
section.main .wrap .main-form .form-title p
{
    font-weight: bold;

    margin: 0;

    text-transform: uppercase;
}
section.main .wrap .main-form .form-container
{
    padding: 1.2vw 2.3vw 1.8vw;
}
section.main .wrap .main-form .form-container p
{
    font-size: 18px;

    margin: 0;

    color: #ff4a4a;
}
section.main .wrap .main-form .form-container .form-wrap
{
    margin: 2.08vw auto;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit'])
{
    display: block;

    width: 100%;
    height: 40px;
    padding-left: 35px;

    border: 1px solid #d6d5d3;
    outline: 0;
    background: #fff;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']).err
{
    border: 1px solid #fb1b1b;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']).err::-webkit-input-placeholder
{
    color: #fb1b1b;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']):not(:last-child)
{
    margin-bottom: 1vw;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']):first-child
{
    background: url('../images/input-name.png') no-repeat 10px center;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']):first-child.err
{
    background: url('../images/input-name-err.png') no-repeat 10px center;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']):nth-child(2)
{
    background: url('../images/input-phone.png') no-repeat 10px center;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']):nth-child(2).err
{
    background: url('../images/input-phone-err.png') no-repeat 10px center;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']):nth-child(3)
{
    background: url('../images/input-mail.png') no-repeat 10px center;
}
section.main .wrap .main-form .form-container .form-wrap input:not([type='submit']):nth-child(3).err
{
    background: url('../images/input-mail-err.png') no-repeat 10px center;
}
section.main .wrap .main-form .form-container .form-wrap input[type='submit']
{
    font-size: 18px;
    font-weight: 500;
    line-height: 45px;

    display: block;

    width: 90%;
    height: 45px;
    margin: 0 auto;

    cursor: pointer;
    transition: .2s;
    text-align: center;
    letter-spacing: 1px;
    text-transform: uppercase;

    color: #fff;
    border: none;
    background: #ff4a4a;
}
section.main .wrap .main-form .form-container .form-wrap input[type='submit']:hover
{
    background: #fb1b1b;
}
section.main .wrap .head-title
{
    float: left;

    max-width: 55%;
}
section.main .wrap .head-title div
{
    font-size: 42px;
    font-weight: 600;

    text-transform: uppercase;
}
section.main .wrap .head-title p
{
    font-size: 30px;

    margin: 0;

    text-transform: uppercase;
}
section.main .wrap .head-title ul
{
    display: block;

    margin: 20px 0 0 0;
    padding: 0 0 0 20px;

    border-left: 7px solid #6398cc;
}
section.main .wrap .head-title ul li
{
    font-size: 26px;

    list-style-type: none;
}
section.main-info
{
    position: relative;

    padding: 2.5vw 0;

    background: #282828;
}
section.main-info:before
{
    position: absolute;
    top: -60px;
    left: 50%;

    display: block;

    content: url('../images/mouse.png');
    -webkit-transform: translateX(-50%);
        -ms-transform: translateX(-50%);
            transform: translateX(-50%);
}
section.main-info .wrap
{
    font-size: 24px;

    text-align: center;
    text-transform: uppercase;
}

/*# sourceMappingURL=data:application/json;base64, */
